#!/usr/bin/env python3

# -*- coding: utf-8 -*-
"""
Created on Thu Sep 26 18:23:17 2019

@author: tony
"""
import matplotlib.pyplot as plt
import rospy
import numpy as np
from nav_msgs.msg import Odometry
from geometry_msgs.msg import Twist
from ltvcmpc_msgs.msg import Params
import os
from datetime import datetime
from ltvcmpc_msgs.srv import *

class dataPlotter(object):
    def __init__(self):
        self._history_x = []
        self._history_y = []
        self._history_v = []
        self._history_theta = []
        self._history_omega = []
        self._history_time_vel = []
        self._history_time_odom = []

    def paramCallback(self, msg):
        self._ltvcmpc_params = str(msg)
        self._mode = msg.mode
        self._Ts = msg.Ts

        # Obtain track elements by calling service 
        rospy.wait_for_service('/get_track')
        try:
            get_track = rospy.ServiceProxy('/get_track', GetTrack)
            # (inner, outer, path, center) = get_track(mode)
            track_output = get_track(self._mode)
            inner = np.vstack([np.array(track_output.x_inner), np.array(track_output.y_inner)])
            outer = np.vstack([np.array(track_output.x_outer), np.array(track_output.y_outer)])
            path = np.vstack([np.array(track_output.x_path), np.array(track_output.y_path)])
            center = np.vstack([np.array(track_output.x_center), np.array(track_output.y_center)])
        except rospy.ServiceException:
            rospy.loginfo("Service call failed")

        self._track_points = {'inner':inner, 'outer':outer, 'path':path, 'center':center}

    def velCallback(self, msg):
        if len(self._history_time_vel) == len(self._history_time_odom):
            v_cmd = msg.linear.x
            omega_cmd = msg.angular.z
            self._history_v.append(v_cmd)
            self._history_omega.append(omega_cmd)
            iteration = len(self._history_time_vel)
            self._history_time_vel.append(iteration+1)
    	
    def odomCallback(self, msg):
        if len(self._history_time_vel) == len(self._history_time_odom)+1:
            # Get the x, y and theta measurements (states)
            x_measure = msg.pose.pose.position.x
            y_measure = msg.pose.pose.position.y
            z_measure = msg.pose.pose.orientation.z
            w_measure = msg.pose.pose.orientation.w
            theta_measure = 2*np.arcsin(abs(z_measure))*np.sign(z_measure)*np.sign(w_measure)
                
            self._history_x.append(x_measure)
            self._history_y.append(y_measure)
            self._history_theta.append(theta_measure)
            iteration = len(self._history_time_odom)
            self._history_time_odom.append(iteration+1)
    
def main():

    data_plotter = dataPlotter()

    # Initialize the ROS node
    rospy.init_node('Data_Plotter')

    # subscribe to the /odom topic and run callback function
    rospy.Subscriber("~odom", Odometry, data_plotter.odomCallback) 
    
    # subscribe to the /odom topic and run callback function
    rospy.Subscriber("~cmd_vel", Twist, data_plotter.velCallback) 

	# subscribe to the /odom topic and run callback function
    rospy.Subscriber("/rover/ltvcmpc_params", Params, data_plotter.paramCallback)

    rospy.spin() # runs forever

    try:
        data_plotter._ltvcmpc_params
    except AttributeError:
        return
    now = datetime.now()
    date_time = now.strftime("%d-%m-%Y, %H:%M:%S")

    history_time_odom = [(i*data_plotter._Ts) for i in data_plotter._history_time_odom]
    history_time_vel = [(i*data_plotter._Ts) for i in data_plotter._history_time_vel]

    plot_folder_path = "../YP2_capstone_ws/src/ltvcmpc_plotter/plots/" + data_plotter._mode + "/" + date_time

    os.mkdir(plot_folder_path)

    fig1 = plt.figure(figsize=[6.4, 5.2])
    ax = fig1.add_subplot(111)
    ax.plot(data_plotter._track_points['outer'][0,:], data_plotter._track_points['outer'][1,:], 'k')
    ax.plot(data_plotter._track_points['path'][0,:], data_plotter._track_points['path'][1,:], 'b--', label='planned path')
    ax.plot(data_plotter._track_points['inner'][0,:], data_plotter._track_points['inner'][1,:], 'k')
    try:
        im = ax.scatter(data_plotter._history_x, data_plotter._history_y, c=data_plotter._history_v, cmap = 'coolwarm', label='followed path')
    except ValueError:
        im = ax.scatter(data_plotter._history_x, data_plotter._history_y, c=data_plotter._history_v[:-1], cmap = 'coolwarm', label='followed path')
    cbar = fig1.colorbar(im, ax=ax)
    cbar.set_label('Velocity', rotation=0)
    ax.title.set_text('Path-Velocity Colormap')
    ax.set_xlabel('x (m)')
    ax.set_ylabel('y (m)')
    ax.legend()
    fig2 = plt.figure(figsize=[9.6, 7.2])
    fig2.subplots_adjust(top=0.9, hspace = 0.4)
    ax1 = fig2.add_subplot(221)
    ax1.scatter(history_time_odom, data_plotter._history_x, marker=".")
    ax1.title.set_text('Rover x Position')
    ax1.set_xlabel('Time (s)')
    ax1.set_ylabel('x (m)')
    ax2 = fig2.add_subplot(222)
    ax2.scatter(history_time_odom, data_plotter._history_y, marker=".")
    ax2.title.set_text('Rover y Position')
    ax2.set_xlabel('Time (s)')
    ax2.set_ylabel('y (m)')
    ax3 = fig2.add_subplot(223)
    ax3.scatter(history_time_odom, data_plotter._history_theta, marker=".")
    ax3.title.set_text('Rover Orientation')
    ax3.set_xlabel('Time (s)')
    ax3.set_ylabel('theta (rad)')
    fig3 = plt.figure(figsize=[6.4, 7.2])
    fig3.subplots_adjust(top=0.9, hspace = 0.4)
    ax4 = fig3.add_subplot(211)
    ax4.scatter(history_time_vel, data_plotter._history_v, marker=".")
    ax4.title.set_text('Rover Linear Velocity')
    ax4.set_xlabel('Time (s)')
    ax4.set_ylabel('linear velocity (m/s)')
    ax5 = fig3.add_subplot(212)
    ax5.scatter(history_time_vel, data_plotter._history_omega, marker=".")
    ax5.title.set_text('Rover Angular Velocity')
    ax5.set_xlabel('Time (s)')
    ax5.set_ylabel('angular velocity (rad/s)')
    fig1.savefig(plot_folder_path + "/colormap.png")
    fig2.savefig(plot_folder_path + "/states.png")
    fig3.savefig(plot_folder_path + "/inputs.png")
    
    param_filname = plot_folder_path + "/ltvcmpc_params.txt"
    param_file = open(param_filname, "w+")
    param_file.write(data_plotter._ltvcmpc_params)
if __name__ == '__main__':
    main()
        
